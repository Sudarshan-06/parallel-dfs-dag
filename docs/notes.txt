Phase 0: file parsing

File format
-----------------
7
0: 2 4 5 #
1: 2 4 5 6 #
2: 3 5 4 6 #
3: 5 #
4: 6 5 #
5: 6 #
6: #
-----------------
id: children ... #

n_nodes = { first line }
Ap_dag[n_nodes + 1] = { 0 }  // one entry for each node ande for marking end
Ai_dag = []  // most likely vector
leaves = []  // leaves of the graph
roots = [] // root of the graph

// this will be _atomic_
incoming[n_nodes] = { 0 } // number of incoming edges into each node

globalCount = 0

do n_nodes time {
    node = { id }

    add globalCount to Ap_dag
    add node to Ai_dag
    globalCount++

    // while not #
    for child in children {
        add child to Ai_dag
        globalCount++

        // to precalculate roots and incoming nodes (see phase 1)
        incoming[child]++
    }

}

// mark end of Ai_dag array
add globalCount to Ap_dag

for node in incoming{
    if(!node){
        add node to roots
    }
}



Phase 1: from dag to dt
// TODO: try and discuss optimization with Quer

parents[n_nodes] = { -1 }
paths[n_nodes] = { {} }
nodeLock[n_nodes] = {...}

// contains the list of the parents for each node (as from the dag)
parents_dag[n_nodes] = { {} }

Q = roots
mP = mutex to protect P modifications

while Q is not empty {
    P = {}

    for node in Q launch task tx {
        starting_children = Ap_dag[node] + 1
        ending_children = Ap_dag[node + 1]

        Br = concatenate node to end of path[node]

        for(i=starting_children; i<ending_children; i++) launch task ty {
            current_child = Ai_dag[i]

            // existing path
            Qr = paths[current_child]

            // CS for current child
            lock nodeLock[current_child] {

            // lexicographic order (update the path in the case in which it is empty)
            if Qr = {} or Br <= Qr {
                paths[current_child] = Br
                parents[current_child] = node
            }

            // add this parent to the list of the parents of the child
            parents_dag[current_child].push_back(node)

            remaining = incoming[current_child]--
            } unlock nodeLock[current_child]
            // end CS

            if(!remaining) lock mP {
                add current_child to P
            } unlock mP
        }
        
        wait all ty
    }
    
    wait all tx

    Q = P
}



Phase 1.5: calculate new Ai_dt, new Ap_dt and number of outgoing nodes
// this is atomic
n_outgoing[n_nodes] = { 0 }
gamma[n_nodes] = { 0 } // will be computed for leaves (needed in the next phase)

Ap_dt[n_nodes+1] = { 0 }
Ai_dt = []
for 0 < i < n_nodes {
    Ap_dt[i] = Ai_dt.length

    Ai_dt.push_back(i)

    children_start = Ap_dt[i] + 1
    children_end = Ap_dt[i + 1]

    // iterate over children of current node i
    for parent_children_start < j < parent_children_end {
        child = Ai_dt[j]

        // verify that this child is a child in dt
        if (parent[child] == i)
             Ai_dt.push_back(j)

    }

    // skip first iteration
    if i > 0 {
        n_outgoing[i-1] = Ap_dt[i] - Ap_dt[i-1] - 1

        if n_outgoing[i-1] == 0
            add i-1 to leaves
            gamma[n_nodes-1] = 1
    }
}

// don't forget last node
// save end of Ai_dt array
Ap_dt[n_nodes] = Ai_dt.length
n_outgoing[n_nodes-1] = Ap_dt[n_nodes] - Ap_dt[n_nodes-1] - 1
if n_outgoing[n_nodes-1] == 0
    add n_nodes-1 to leaves
    gamma[n_nodes-1] = 1


Phase 2: sub graph size

Q = leaves

// gamma was already initialized in the previous phase
gamma_tilde[n_nodes] = { 0 }
mC = mutex to protect C modifications

while Q is not empty {
    C = {}

    for node in Q do tasks tx {

        parent = parents[node]

        // note: explain deeply to Quer why there is no parallelism
        // we don't need parallelism (differently from the paper) since we have just one parent (we are in a dt)

        // check that it has a parent, i.e. it is not a root
        if parent != -1 {

            do atomic {
            if(sub (n_outgoing[parent], 1) == 0)
            }
                lock(mC){
                    insert parent into C
                }unlock(mC)
        }
    }

    wait tasks tx

    for p in C do task ty {

        parent_children_start = Ap_dt[p] + 1
        parent_children_end = Ap_dt[p + 1]

        sort in-place elements from Ap_dt[parent_children_start] to (excluded) Ap_dt[parent_children_end]

        // iterate over children of p
        for parent_children_start < i < parent_children_end {
            child = Ai_dt[i]

            gamma_tilde[child] = gamma[p]
            gamma[p] += gamma[child]
        }

        // count also p itself
        gamma[p]++
    }

    wait tasks ty

    Q = C

}

Phase 3: pre and post order
post_order[n_nodes] = { 0 }
Q = roots
mP mutex to protect P

while Q is not empty {

    P = {}

    for p in Q launch tasks tx {

        post = post_order[p]

        children_start = Ap_dt[p] + 1
        children_end = Ap_dt[p + 1]

        // iterate over children of current node p
        for parent_children_start < i < parent_children_end launch tasks ty {
            child = Ai_dt[i]

            post_order[child] = post + gamma_tilde[child]
            lock(mP){
                insert child into P
            }unlock(mP)

        }
        wait tasks ty

        // BIG WARNING !!!! The paper does not include the final -1
        // TODO ask someone, check stuff, if you find problems they're here
        post_order[p] = post + gamma[p] - 1

    }

    wait tasks tx

    Q = P
}


Phase 4: calculate outer (e_v) and inner rank (s_v)

// TODO: this phase is not actually necessary
// in fact:
// e_v can be either computed in phase 3 or when writing the file
// s_v can be computed as well for all the nodes except for the leaves in phase 3, when assigning
// the post order of a node p by eventually updating the s_v of the parent if it is greater than the e_v of the current
// node. Leaves can be simply calculated either when printing into the file or with another cycle on the leaves
// precalculated array. Discuss this with Quer

e_v[n_nodes] = { 0 }
s_v[n_nodes] = { 0 }
mutex mP to protect P modifications

Q = leaves
while Q is not empty {

    P = {}

    for p in Q launch tasks tx {
        e_v[p] = post_order[p] + 1

        min = MAX_INT
        children_start = Ap_dag[p] + 1
        children_end = Ap_dag[p + 1]

        if(children_start == children_end) {
            // this is a leaf        
            s_v[p] = e_v[p]
        } else {
            // iterate over children of current node p
            for parent_children_start < i < parent_children_end {
                // no parallelization in this cycle (min should be protected and that's not worth it)
                child = Ai_dag[i]
   
                // once here we have visited the children of the node p
                if(s_v[child] < min) min = s_v[child]
            }

            s_v[p] = min
        }
        
        // check that it has a parent, i.e. it is not a root
        if parent[p] != -1 {

            do atomic {
            if(sub (n_outgoing[parent], 1) == 0)
            }
                lock(mP){
                    insert parent into P
                }unlock(mP)
        }
    }

    wait tasks tx

    Q = P
}

